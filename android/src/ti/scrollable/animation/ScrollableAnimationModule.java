/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.scrollable.animation;

import java.lang.reflect.*;
import java.util.Arrays;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import ti.modules.titanium.ui.ScrollableViewProxy;
import ti.modules.titanium.ui.widget.TiUIScrollableView;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.PageTransformer;

import com.eftimoff.viewpagertransformers.*;


@Kroll.module(name="ScrollableAnimation", id="ti.scrollable.animation")
public class ScrollableAnimationModule extends KrollModule {
	// Standard Debugging variables
	private static final String LCAT = "ScrollableAnimationModule";
	private static final String MISSING_VIEW = "ScrollableView is missing as 1st argument";
	private static final String MISSING_TYPE = "Incorrect animation type passed. Refer the module docs to pass correct animation type. Using default animation.";

	// You can define constants with @Kroll.constant, for example:
	@Kroll.constant public static final String ACCORDION_HORIZONTAL = "AccordionHorizontalTransformer";
	@Kroll.constant public static final String ACCORDION_VERTICAL = "AccordionVerticalTransformer";
	@Kroll.constant public static final String BACKGROUND_TO_FOREGROUND = "BackgroundToForegroundTransformer";
	@Kroll.constant public static final String FOREGROUND_TO_BACKGROUND = "ForegroundToBackgroundTransformer";
	@Kroll.constant public static final String BASE = "BaseTransformer";
	@Kroll.constant public static final String CUBE_IN = "CubeInTransformer";
	@Kroll.constant public static final String CUBE_OUT = "CubeOutTransformer";
	@Kroll.constant public static final String DEFAULT = "DefaultTransformer";
	@Kroll.constant public static final String DEPTH_PAGE = "DepthPageTransformer";
	@Kroll.constant public static final String DRAW_FROM_BACK = "DrawFromBackTransformer";
	@Kroll.constant public static final String FLIP_HORIZONTAL = "FlipHorizontalTransformer";
	@Kroll.constant public static final String FLIP_VERTICAL = "FlipVerticalTransformer";
	@Kroll.constant public static final String ROTATE_DOWN = "RotateDownTransformer";
	@Kroll.constant public static final String ROTATE_UP = "RotateUpTransformer";
	@Kroll.constant public static final String STACK = "StackTransformer";
	@Kroll.constant public static final String TABLET = "TabletTransformer";
	@Kroll.constant public static final String ZOOM_IN = "ZoomInTransformer";
	@Kroll.constant public static final String ZOOM_OUT_SLIDE = "ZoomOutSlideTransformer";
	@Kroll.constant public static final String ZOOM_OUT = "ZoomOutTranformer";
	
	private static final String ANIMATION_PACKAGE = "com.eftimoff.viewpagertransformers.";
	

	private final String[] ANIMATION_TYPES = {
		ACCORDION_HORIZONTAL,
		ACCORDION_VERTICAL,
		BACKGROUND_TO_FOREGROUND,
		FOREGROUND_TO_BACKGROUND,
		BASE,
		CUBE_IN,
		CUBE_OUT,
		DEFAULT,
		DEPTH_PAGE,
		DRAW_FROM_BACK,
		FLIP_HORIZONTAL,
		FLIP_VERTICAL,
		ROTATE_DOWN,
		ROTATE_UP,
		STACK,
		TABLET,
		ZOOM_IN,
		ZOOM_OUT_SLIDE,
		ZOOM_OUT
	};

	public ScrollableAnimationModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
	}

	@Kroll.method
	public void setAnimation(@Kroll.argument (optional=true) Object view, @Kroll.argument (optional=true) Object type) {
		if (view == null) {
			Log.e(LCAT, MISSING_VIEW);
			
		} else if (view instanceof ScrollableViewProxy) {
			if (type == null) {
				Log.e(LCAT, MISSING_TYPE);
				
			} else if (type instanceof String) {
				// check if the animation exists or not
	            int index = Arrays.asList(ANIMATION_TYPES).indexOf(type);

	            if (index == -1) {
	            	Log.e(LCAT, MISSING_TYPE);
	            	
	            } else {
	            	try {
						String classPath = ANIMATION_PACKAGE + (String) type;
						PageTransformer pageTransformer = (PageTransformer) Class.forName(classPath).newInstance();
						TiUIScrollableView sv = (TiUIScrollableView) ((ScrollableViewProxy) view).getOrCreateView();
						
						ViewPager viewPager = null;
						Field[] fields = sv.getClass().getDeclaredFields();
				        
				        for (Field field : fields) {
				            if (field.getType().getSimpleName().equalsIgnoreCase("ViewPager")) {
				            	try {
				            		field.setAccessible(true);
					            	viewPager = (ViewPager) field.get(sv);
				            	}  catch (Exception e) {
									e.printStackTrace();
								}
				            	break;
				            }
				        }
				        
				        if (viewPager != null) {
				        	viewPager.setPageTransformer(true, pageTransformer);
				        	
				        } else {
				        	Log.e(LCAT, "ViewPager could not be found.");
				        }
				    	
					} catch (Exception e) {
						e.printStackTrace();
					}
	            }
				
			} else {
				Log.e(LCAT, MISSING_TYPE);
			}

		} else {
			Log.e(LCAT, MISSING_VIEW);
		}
	}
}
